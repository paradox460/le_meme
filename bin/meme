#!/usr/bin/env ruby

require 'bundler/setup'
require 'le_meme'
require 'optparse'
require 'pry'

options = {}

if ARGV.empty?
  exit(0) unless $stdout.tty?
  $stdout.puts 'Usage: meme [options] [top-text] [bottom-text]'
  $stdout.puts '    run -h for help'
  exit(0)
end

memelib = LeMeme::MemeLib.new_with_default_memes

OptionParser.new do |opts|
  opts.banner = <<-HEREDOC
Usage: meme [options] [top-text] [bottom-text]

Top and bottom may be set by the last 2 unprefixed arguments, or by their respective flags.
If you don't specify a meme, either via image path or by template, we'll pick one for you.
HEREDOC

  opts.separator '---'

  opts.on('-tTOP', '--top=TOP', 'top text') do |top|
    options[:top] = top
  end
  opts.on('-bBOTTOM', '--bottom=BOTTOM', 'bottom text') do |bottom|
    options[:bottom] = bottom
  end
  opts.on('-wWATERMARK', '--watermark=WATERMARK', 'watermark text') do |watermark|
    options[:watermark] = watermark
  end

  opts.separator ''

  opts.on('-mTEMPLATE', '--meme=TEMPLATE', 'meme template you want to use. See --templates for list') do |template|
    options[:template] = template
  end

  opts.on('-pPATH', '--path=PATH', 'path to image file to use') do |path|
    options[:path] = path
  end
  opts.on('-oPATH', '--outpath=PATH', 'path to save generated meme') do |path|
    options[:outpath] = path
  end
  opts.on('-O', '--open', 'open when finished') do |o|
    options[:open] = o
  end

  opts.separator ''

  opts.on('--templates', 'list all the meme templates') do
    puts memelib.memes.keys.join("\n")
    exit(0)
  end

  opts.on('-h', '--help', 'prints this help') do
    puts opts
    exit(0)
  end
end.parse!

top = options[:top] || ARGV[0]
bottom = options[:bottom] || ARGV[1]

meme = if options[:path]
         LeMeme::Meme.new(options[:path], top: top, bottom: bottom, watermark: options[:watermark])
       else
         template = options[:template].nil? ? nil : options[:template].strip
         memelib.meme(template: template, top: top, bottom: bottom, watermark: options[:watermark])
       end

output = meme.to_file(options[:outpath]).path

if options[:open]
  case RbConfig::CONFIG['host_os']
  when /mswin|mingw|cygwin/
    `start '#{output}'`
  when /darwin/
    `open -F '#{output}'`
  when /linux|bsd/
    `xdg-open '#{output}'`
  else
    $stderr.puts "Sorry, don't know how to open on your system! (#{RbConfig::Config['host_os']})"
  end
else
  $stdout.puts output
end
exit
